AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Automatic CloudWatch metrics, alarms and dashboards

Metadata:
  AWS::ServerlessRepo::Application:
    Name: slic-watch
    Description: Automatic CloudWatch metrics, alarms and dashboards
    Author: fourTheorem
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['cloudwatch', 'lambda', 'kinesis', 'dynamodb']
    HomePageUrl: https://github.com/fourTheorem/slic-watch
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/fourTheorem/slic-watch

Parameters:
  WatchServices:
    Type: String
    Description: >
      A comma-separated list of AWS services to watch.
      All supported services are included by default
      (`lambda,kinesis,sqs,dynamodb`).
    Default: 'lambda,kinesis,sqs,dynamodb'
  TagFilter:
    Type: String
    Description: >
      A filter pattern used to match deployed services to be watched,
      e.g. '(KEY1=VALUE or KEY1=VALUE) and KEY2!=VALUE'
  LambdaErrorsThreshold:
    Type: Number
    Description: >
      The value against which the statistic is compared.
    Default: 1
  LambdaErrorsPeriod:
    Type: Number
    Description: >
      The length, in seconds, used each time the metric is evaluated.
      Valid values are 10, 30, and any multiple of 60.
    Default: 60

Globals:
  Function:
    Environment:
      Variables:
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_TRACE_DISABLED: true
        POWERTOOLS_SERVICE_NAME: slicwatch
        LOG_LEVEL: INFO
        SNS_ALARMS_TOPIC: !Ref SNSAlarmsTopic

Resources:
  WatchExistingResources:
    Type: AWS::Serverless::Function
    Properties:
      Description: Find existing resources and create or update CloudWatch alarms, metrics and dashboards
      CodeUri: watch/
      Handler: watch_handler.watch_existing
      Runtime: python3.8
      Timeout: 30
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cloudwatch:ListMetrics
              - cloudwatch:PutDashboard
              - cloudwatch:PutMetricAlarm
              - cloudwatch:PutMetricData
            Resource: '*'
        - Statement:
            Effect: Allow
            Action:
              - lambda:GetFunction
              - lambda:ListFunctions
            Resource: '*'
      Events:
        CloudTrailTrigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.lambda
              detail-type:
                - AWS API Call via CloudTrail
              detail:
                eventSource:
                  - lambda.amazonaws.com
                eventName:
                  - prefix: CreateFunction
                  - prefix: DeleteFunction

  WatchExistingResourcesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WatchExistingResources}
      RetentionInDays: 7

  DeleteResources:
    Type: AWS::Serverless::Function
    Properties:
      Description: Remove existing alarms and metrics linked to a deleted resource
      CodeUri: watch/
      Handler: delete_handler.delete_resources
      Runtime: python3.8
      Timeout: 30
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cloudwatch:DeleteAlarms
              - cloudwatch:DescribeAlarms
            Resource: '*'
        - Statement:
            Effect: Allow
            Action:
              - lambda:GetFunction
            Resource: '*'
      Events:
        CloudTrailTrigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.lambda
              detail-type:
                - AWS API Call via CloudTrail
              detail:
                eventSource:
                  - lambda.amazonaws.com
                eventName:
                  - prefix: DeleteFunction

  DeleteResourcesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteResources}
      RetentionInDays: 7

  LambdaInvocationCustomResource:
    # This SAR application allows us to invoke Lambda functions
    # on CloudFormation create/update/delete
    # See https://github.com/lumigo-io/SAR-lambdaInvocation-cfn-custom-resource
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:374852340823:applications/lambda-invocation-cfn-custom-resource
        SemanticVersion: 1.4.0

  InvokeWatchExisting:
    Type: Custom::LambdaInvocation
    DependsOn:
      - WatchExistingResources
      - LambdaInvocationCustomResource
    Properties:
      ServiceToken: !GetAtt LambdaInvocationCustomResource.Outputs.FunctionArn
      FunctionName: !Ref WatchExistingResources
      InvocationType: Event
      Payload:
        WatchServices: !Ref WatchServices
        TagFilter: !Ref TagFilter
        LambdaErrorsThreshold: !Ref LambdaErrorsThreshold
        LambdaErrorsPeriod: !Ref LambdaErrorsPeriod

  SNSAlarmsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: SLICWatchAlarms
