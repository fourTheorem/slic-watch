---
  Transform: "SlicWatch-v3"
  Metadata: 
    slicWatch: 
      enabled: true
      alarms: 
        Lambda: 
          Invocations: 
            enabled: true
            Threshold: 10
        SQS: 
          AgeOfOldestMessage: 
            Statistic: "Maximum"
            enabled: true
            Threshold: 60
          InFlightMessagesPc: 
            Statistic: "Maximum"
            Threshold: 1
  Resources: 
    MyWebServerLB3B5FD3AB: 
      Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Properties: 
        LoadBalancerAttributes: 
          - 
            Key: "deletion_protection.enabled"
            Value: "false"
        Scheme: "internet-facing"
        SecurityGroups: 
          - 
            Fn::GetAtt: 
              - "MyWebServerLBSecurityGroup01B285AA"
              - "GroupId"
        Subnets: 
          - 
            Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1Subnet3C273B99"
          - 
            Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2Subnet95FF715A"
        Type: "application"
      DependsOn: 
        - "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1DefaultRouteFF4E2178"
        - "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2DefaultRouteB1375520"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/LB/Resource"
    MyWebServerLBSecurityGroup01B285AA: 
      Type: "AWS::EC2::SecurityGroup"
      Properties: 
        GroupDescription: "Automatically created Security Group for ELB CdkECSStackTestEuropeMyWebServerLBE298D4B6"
        SecurityGroupIngress: 
          - 
            CidrIp: "0.0.0.0/0"
            Description: "Allow from anyone on port 80"
            FromPort: 80
            IpProtocol: "tcp"
            ToPort: 80
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/LB/SecurityGroup/Resource"
    MyWebServerLBSecurityGrouptoCdkECSStackTestEuropeMyWebServerServiceSecurityGroup792A2ECD807CF0A9FB: 
      Type: "AWS::EC2::SecurityGroupEgress"
      Properties: 
        GroupId: 
          Fn::GetAtt: 
            - "MyWebServerLBSecurityGroup01B285AA"
            - "GroupId"
        IpProtocol: "tcp"
        Description: "Load balancer to target"
        DestinationSecurityGroupId: 
          Fn::GetAtt: 
            - "MyWebServerServiceSecurityGroup6788214A"
            - "GroupId"
        FromPort: 80
        ToPort: 80
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/LB/SecurityGroup/to CdkECSStackTestEuropeMyWebServerServiceSecurityGroup792A2ECD:80"
    MyWebServerLBPublicListener03D7C493: 
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties: 
        DefaultActions: 
          - 
            TargetGroupArn: 
              Ref: "MyWebServerLBPublicListenerECSGroup5AB9F1C3"
            Type: "forward"
        LoadBalancerArn: 
          Ref: "MyWebServerLB3B5FD3AB"
        Port: 80
        Protocol: "HTTP"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/LB/PublicListener/Resource"
    MyWebServerLBPublicListenerECSGroup5AB9F1C3: 
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties: 
        Port: 80
        Protocol: "HTTP"
        TargetGroupAttributes: 
          - 
            Key: "stickiness.enabled"
            Value: "false"
        TargetType: "ip"
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/LB/PublicListener/ECSGroup/Resource"
    MyWebServerTaskDefTaskRoleB23C17AA: 
      Type: "AWS::IAM::Role"
      Properties: 
        AssumeRolePolicyDocument: 
          Statement: 
            - 
              Action: "sts:AssumeRole"
              Effect: "Allow"
              Principal: 
                Service: "ecs-tasks.amazonaws.com"
          Version: "2012-10-17"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/TaskDef/TaskRole/Resource"
    MyWebServerTaskDef4CE825A0: 
      Type: "AWS::ECS::TaskDefinition"
      Properties: 
        ContainerDefinitions: 
          - 
            Essential: true
            Image: "amazon/amazon-ecs-sample"
            LogConfiguration: 
              LogDriver: "awslogs"
              Options: 
                awslogs-group: 
                  Ref: "MyWebServerTaskDefwebLogGroupC6EE23D4"
                awslogs-stream-prefix: "MyWebServer"
                awslogs-region: "eu-west-1"
            Name: "web"
            PortMappings: 
              - 
                ContainerPort: 80
                Protocol: "tcp"
        Cpu: "256"
        ExecutionRoleArn: 
          Fn::GetAtt: 
            - "MyWebServerTaskDefExecutionRole3C69E361"
            - "Arn"
        Family: "CdkECSStackTestEuropeMyWebServerTaskDef979012A1"
        Memory: "512"
        NetworkMode: "awsvpc"
        RequiresCompatibilities: 
          - "FARGATE"
        TaskRoleArn: 
          Fn::GetAtt: 
            - "MyWebServerTaskDefTaskRoleB23C17AA"
            - "Arn"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/TaskDef/Resource"
    MyWebServerTaskDefwebLogGroupC6EE23D4: 
      Type: "AWS::Logs::LogGroup"
      UpdateReplacePolicy: "Retain"
      DeletionPolicy: "Retain"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/TaskDef/web/LogGroup/Resource"
    MyWebServerTaskDefExecutionRole3C69E361: 
      Type: "AWS::IAM::Role"
      Properties: 
        AssumeRolePolicyDocument: 
          Statement: 
            - 
              Action: "sts:AssumeRole"
              Effect: "Allow"
              Principal: 
                Service: "ecs-tasks.amazonaws.com"
          Version: "2012-10-17"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/TaskDef/ExecutionRole/Resource"
    MyWebServerTaskDefExecutionRoleDefaultPolicy2AEB4329: 
      Type: "AWS::IAM::Policy"
      Properties: 
        PolicyDocument: 
          Statement: 
            - 
              Action: 
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Effect: "Allow"
              Resource: 
                Fn::GetAtt: 
                  - "MyWebServerTaskDefwebLogGroupC6EE23D4"
                  - "Arn"
          Version: "2012-10-17"
        PolicyName: "MyWebServerTaskDefExecutionRoleDefaultPolicy2AEB4329"
        Roles: 
          - 
            Ref: "MyWebServerTaskDefExecutionRole3C69E361"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/TaskDef/ExecutionRole/DefaultPolicy/Resource"
    MyWebServerService2FE7341D: 
      Type: "AWS::ECS::Service"
      Properties: 
        Cluster: 
          Ref: "EcsDefaultClusterMnL3mNNYN926A5246"
        DeploymentConfiguration: 
          MaximumPercent: 200
          MinimumHealthyPercent: 50
        EnableECSManagedTags: false
        HealthCheckGracePeriodSeconds: 60
        LaunchType: "FARGATE"
        LoadBalancers: 
          - 
            ContainerName: "web"
            ContainerPort: 80
            TargetGroupArn: 
              Ref: "MyWebServerLBPublicListenerECSGroup5AB9F1C3"
        NetworkConfiguration: 
          AwsvpcConfiguration: 
            AssignPublicIp: "DISABLED"
            SecurityGroups: 
              - 
                Fn::GetAtt: 
                  - "MyWebServerServiceSecurityGroup6788214A"
                  - "GroupId"
            Subnets: 
              - 
                Ref: "EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet1Subnet075EFF4C"
              - 
                Ref: "EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet2SubnetE4CEDF73"
        TaskDefinition: 
          Ref: "MyWebServerTaskDef4CE825A0"
      DependsOn: 
        - "MyWebServerLBPublicListenerECSGroup5AB9F1C3"
        - "MyWebServerLBPublicListener03D7C493"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/Service/Service"
    MyWebServerServiceSecurityGroup6788214A: 
      Type: "AWS::EC2::SecurityGroup"
      Properties: 
        GroupDescription: "CdkECSStackTest-Europe/MyWebServer/Service/SecurityGroup"
        SecurityGroupEgress: 
          - 
            CidrIp: "0.0.0.0/0"
            Description: "Allow all outbound traffic by default"
            IpProtocol: "-1"
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/Service/SecurityGroup/Resource"
    MyWebServerServiceSecurityGroupfromCdkECSStackTestEuropeMyWebServerLBSecurityGroup8823910380E44CF71E: 
      Type: "AWS::EC2::SecurityGroupIngress"
      Properties: 
        IpProtocol: "tcp"
        Description: "Load balancer to target"
        FromPort: 80
        GroupId: 
          Fn::GetAtt: 
            - "MyWebServerServiceSecurityGroup6788214A"
            - "GroupId"
        SourceSecurityGroupId: 
          Fn::GetAtt: 
            - "MyWebServerLBSecurityGroup01B285AA"
            - "GroupId"
        ToPort: 80
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/MyWebServer/Service/SecurityGroup/from CdkECSStackTestEuropeMyWebServerLBSecurityGroup88239103:80"
    EcsDefaultClusterMnL3mNNYN926A5246: 
      Type: "AWS::ECS::Cluster"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Resource"
    EcsDefaultClusterMnL3mNNYNVpc7788A521: 
      Type: "AWS::EC2::VPC"
      Properties: 
        CidrBlock: "10.0.0.0/16"
        EnableDnsHostnames: true
        EnableDnsSupport: true
        InstanceTenancy: "default"
        Tags: 
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/Resource"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1Subnet3C273B99: 
      Type: "AWS::EC2::Subnet"
      Properties: 
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
        AvailabilityZone: 
          Fn::Select: 
            - 0
            - 
              Fn::GetAZs: ""
        CidrBlock: "10.0.0.0/18"
        MapPublicIpOnLaunch: true
        Tags: 
          - 
            Key: "aws-cdk:subnet-name"
            Value: "Public"
          - 
            Key: "aws-cdk:subnet-type"
            Value: "Public"
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet1"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet1/Subnet"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1RouteTableA1FD6ACC: 
      Type: "AWS::EC2::RouteTable"
      Properties: 
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
        Tags: 
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet1"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet1/RouteTable"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1RouteTableAssociation8B583A17: 
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties: 
        RouteTableId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1RouteTableA1FD6ACC"
        SubnetId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1Subnet3C273B99"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet1/RouteTableAssociation"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1DefaultRouteFF4E2178: 
      Type: "AWS::EC2::Route"
      Properties: 
        RouteTableId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1RouteTableA1FD6ACC"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcIGW9C2C2B8F"
      DependsOn: 
        - "EcsDefaultClusterMnL3mNNYNVpcVPCGW2447264E"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet1/DefaultRoute"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1EIP8704DB2F: 
      Type: "AWS::EC2::EIP"
      Properties: 
        Domain: "vpc"
        Tags: 
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet1"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet1/EIP"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1NATGateway5E3732C1: 
      Type: "AWS::EC2::NatGateway"
      Properties: 
        SubnetId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1Subnet3C273B99"
        AllocationId: 
          Fn::GetAtt: 
            - "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1EIP8704DB2F"
            - "AllocationId"
        Tags: 
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet1"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet1/NATGateway"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2Subnet95FF715A: 
      Type: "AWS::EC2::Subnet"
      Properties: 
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
        AvailabilityZone: 
          Fn::Select: 
            - 1
            - 
              Fn::GetAZs: ""
        CidrBlock: "10.0.64.0/18"
        MapPublicIpOnLaunch: true
        Tags: 
          - 
            Key: "aws-cdk:subnet-name"
            Value: "Public"
          - 
            Key: "aws-cdk:subnet-type"
            Value: "Public"
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet2"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet2/Subnet"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2RouteTable263DEAA5: 
      Type: "AWS::EC2::RouteTable"
      Properties: 
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
        Tags: 
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet2"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet2/RouteTable"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2RouteTableAssociation43E5803C: 
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties: 
        RouteTableId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2RouteTable263DEAA5"
        SubnetId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2Subnet95FF715A"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet2/RouteTableAssociation"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2DefaultRouteB1375520: 
      Type: "AWS::EC2::Route"
      Properties: 
        RouteTableId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2RouteTable263DEAA5"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcIGW9C2C2B8F"
      DependsOn: 
        - "EcsDefaultClusterMnL3mNNYNVpcVPCGW2447264E"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet2/DefaultRoute"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2EIPF0764873: 
      Type: "AWS::EC2::EIP"
      Properties: 
        Domain: "vpc"
        Tags: 
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet2"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet2/EIP"
    EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2NATGateway4C855E00: 
      Type: "AWS::EC2::NatGateway"
      Properties: 
        SubnetId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2Subnet95FF715A"
        AllocationId: 
          Fn::GetAtt: 
            - "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2EIPF0764873"
            - "AllocationId"
        Tags: 
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet2"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PublicSubnet2/NATGateway"
    EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet1Subnet075EFF4C: 
      Type: "AWS::EC2::Subnet"
      Properties: 
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
        AvailabilityZone: 
          Fn::Select: 
            - 0
            - 
              Fn::GetAZs: ""
        CidrBlock: "10.0.128.0/18"
        MapPublicIpOnLaunch: false
        Tags: 
          - 
            Key: "aws-cdk:subnet-name"
            Value: "Private"
          - 
            Key: "aws-cdk:subnet-type"
            Value: "Private"
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet1"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet1/Subnet"
    EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet1RouteTable4F1D2E36: 
      Type: "AWS::EC2::RouteTable"
      Properties: 
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
        Tags: 
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet1"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet1/RouteTable"
    EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet1RouteTableAssociation34B92275: 
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties: 
        RouteTableId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet1RouteTable4F1D2E36"
        SubnetId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet1Subnet075EFF4C"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet1/RouteTableAssociation"
    EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet1DefaultRouteA5ADF694: 
      Type: "AWS::EC2::Route"
      Properties: 
        RouteTableId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet1RouteTable4F1D2E36"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet1NATGateway5E3732C1"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet1/DefaultRoute"
    EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet2SubnetE4CEDF73: 
      Type: "AWS::EC2::Subnet"
      Properties: 
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
        AvailabilityZone: 
          Fn::Select: 
            - 1
            - 
              Fn::GetAZs: ""
        CidrBlock: "10.0.192.0/18"
        MapPublicIpOnLaunch: false
        Tags: 
          - 
            Key: "aws-cdk:subnet-name"
            Value: "Private"
          - 
            Key: "aws-cdk:subnet-type"
            Value: "Private"
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet2"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet2/Subnet"
    EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet2RouteTableDCE46591: 
      Type: "AWS::EC2::RouteTable"
      Properties: 
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
        Tags: 
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet2"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet2/RouteTable"
    EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet2RouteTableAssociation111C622F: 
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties: 
        RouteTableId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet2RouteTableDCE46591"
        SubnetId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet2SubnetE4CEDF73"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet2/RouteTableAssociation"
    EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet2DefaultRoute20CE2D89: 
      Type: "AWS::EC2::Route"
      Properties: 
        RouteTableId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPrivateSubnet2RouteTableDCE46591"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcPublicSubnet2NATGateway4C855E00"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/PrivateSubnet2/DefaultRoute"
    EcsDefaultClusterMnL3mNNYNVpcIGW9C2C2B8F: 
      Type: "AWS::EC2::InternetGateway"
      Properties: 
        Tags: 
          - 
            Key: "Name"
            Value: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/IGW"
    EcsDefaultClusterMnL3mNNYNVpcVPCGW2447264E: 
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties: 
        VpcId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpc7788A521"
        InternetGatewayId: 
          Ref: "EcsDefaultClusterMnL3mNNYNVpcIGW9C2C2B8F"
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/EcsDefaultClusterMnL3mNNYN/Vpc/VPCGW"
    CDKMetadata: 
      Type: "AWS::CDK::Metadata"
      Properties: 
        Analytics: "v2:deflate64:H4sIAAAAAAAA/31Ry27CMBD8Fu7GLVQqZ0opQkJtlCCuyHGWdCHYkb0OQlH+vc6DNKVVTzs7HnvXM1P+NOOPI3GxY5mcxhnGvIxIyBPz1L4Eafe5IAKjLJ/neYZSEGq10SJ5EZlQEpI3YVJBEIEpUAKDTFhCmXlF3ChQpcWUl3/fNmxx+NkPdWgJVKe54cH51k8GWhnt8loyaCsG0s+MQDqDdO0l/xPL1IC1v+i1avldLuuzXbBggYv9EpGLFVCj71GoHcFWxBl889/c3FotsVm+F9dguQ7q8i5o5a28iCsLDBa1q/3Da1WnAL2g3aTr5uQz+zyDovrnlpddKFthT69wQIW3kfeMViTQ+zrg7gJt7Ohg5nwKTR4drBiKMy9D3f63qYH23jQLtqhimU79Thud9r7fcFXV3Yej3BELwWpn2pE3XDGlE+BH+1BMnvlkxiejo0UcG6cIz8DDtn4BUemZuMgCAAA="
      Metadata: 
        aws:cdk:path: "CdkECSStackTest-Europe/CDKMetadata/Default"
  Outputs: 
    MyWebServerLoadBalancerDNSD1AFCC81: 
      Value: 
        Fn::GetAtt: 
          - "MyWebServerLB3B5FD3AB"
          - "DNSName"
    MyWebServerServiceURLB0ED50F6: 
      Value: 
        Fn::Join: 
          - ""
          - 
            - "http://"
            - 
              Fn::GetAtt: 
                - "MyWebServerLB3B5FD3AB"
                - "DNSName"
  Parameters: 
    BootstrapVersion: 
      Type: "AWS::SSM::Parameter::Value<String>"
      Default: "/cdk-bootstrap/hnb659fds/version"
      Description: "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  Rules: 
    CheckBootstrapVersion: 
      Assertions: 
        - 
          Assert: 
            Fn::Not: 
              - 
                Fn::Contains: 
                  - 
                    - "1"
                    - "2"
                    - "3"
                    - "4"
                    - "5"
                  - 
                    Ref: "BootstrapVersion"
          AssertDescription: "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."

