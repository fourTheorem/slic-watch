service: serverless-test-project
frameworkVersion: "2"
configValidationMode: error
variablesResolutionMode: 20210219

plugins:
  - serverless-step-functions
  - serverless-slic-watch-plugin

custom:
  slicWatch:
    topicArn: ${env:ALARM_TOPIC}
    alarms:
      Lambda:
        Invocations:
          ActionsEnabled: true
          Threshold: 10
      SQS:
        AgeOfOldestMessage:
          Statistic: Maximum
          ActionsEnabled: true
          Threshold: 60
        InFlightMessagesPc:
          Statistic: Maximum
          Threshold: 1 # 1% = 1200 for regular queues or 180 for FIFO queues


provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: eu-west-1
  stage: dev
  endpointType: REGIONAL
  eventBridge:
    useCloudFormation: true

functions:
  hello:
    handler: basic-handler.hello
    slicWatch:
      alarms:
        Lambda:
          Invocations:
            Threshold: 2

  ping:
    handler: basic-handler.hello
    slicWatch:
      dashboard:
        enabled: false

  throttler:
    handler: basic-handler.hello
    reservedConcurrency: 0

  driveStream:
    handler: stream-test-handler.handleDrive
    environment:
      STREAM_NAME: { "Ref": stream }

  driveQueue:
    handler: queue-test-handler.handleDrive

  driveTable:
    handler: table-test-hander.handleDrive

  streamProcessor:
    handler: stream-handler.handle
    events:
      - stream:
          type: kinesis
          arn: { "Fn::GetAtt": [stream, Arn] }
          startingPosition: LATEST
          maximumRetryAttempts: 0

  httpGetter:
    handler: apigw-handler.handleGet
    timeout: 30
    events:
      - http:
          method: get
          path: "item"

  subscriptionHandler:
    handler: apigw-handler.handleSubscription
    timeout: 30
    events:
      - http:
          method: post
          path: "subscription"
  
  eventsRule:
    handler: rule-handler.handleRule
    slicWatch:
      alarms:
          Lambda:
            enabled: false
    events:
      - eventBridge:
          useCloudFormation: true
          pattern:
            detail-type: 
            - Invoke Lambda Function
          retryPolicy:
            maximumEventAge: 60
            maximumRetryAttempts: 2

resources: ${file(./sls-resources.yml)}

stepFunctions:
  stateMachines:
    workflow:
      name: Workflow
      definition: ${file(./state-machine.yml)}
      loggingConfig:
        level: ALL
        includeExecutionData: true
        destinations:
          - Fn::GetAtt: [workflowLogGroup, Arn]
    expressWorkflow:
      name: ExpressWorkflow
      type: EXPRESS
      definition: ${file(./state-machine.yml)}
      loggingConfig:
        level: ALL
        includeExecutionData: true
        destinations:
          - Fn::GetAtt: [expressWorkflowLogGroup, Arn]

